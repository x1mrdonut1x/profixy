{"version":3,"sources":["app/styles.module.css","pages/start/styles.module.css","app/layout/styles.module.css","constants/index.ts","app/layout/Sider.tsx","pages/start/Start.tsx","components/Menu.tsx","app/layout/Header.tsx","app/layout/Content.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","routes","linkTo","label","Sider","onToggleSider","location","useLocation","useState","pathname","split","active","setActive","useEffect","className","styles","sider","user","listWrapper","map","item","to","onClick","classNames","divider","Start","wrapper","Menu","viewBox","width","height","rx","y","getRoute","path","route","find","r","toUpperCase","Header","header","setHeader","icon","title","Content","siderOpen","content","component","exact","from","App","setSiderOpen","handleToggleSider","prev","app","basename","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.183881f1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"styles_app__Hg266\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"styles_wrapper__gdHQH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"styles_header__3oqtX\",\"listWrapper\":\"styles_listWrapper__1DslZ\",\"divider\":\"styles_divider__1RYD4\",\"active\":\"styles_active__nGFhQ\",\"sider\":\"styles_sider__3sp1p\",\"siderOpen\":\"styles_siderOpen__3QCTb\",\"user\":\"styles_user__eAknN\",\"content\":\"styles_content__1RFBu\",\"title\":\"styles_title__27VqB\",\"icon\":\"styles_icon__1aLx8\"};","const routes = [\r\n  { linkTo: \"/1\", label: \"Start\" },\r\n  { linkTo: \"/2\", label: \"Your Cart\" },\r\n  { linkTo: \"/3\", label: \"Favourites\" },\r\n  { linkTo: \"/4\", label: \"Your Orders\" },\r\n];\r\n\r\nexport { routes };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./styles.module.css\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport classNames from \"classnames\";\r\nimport { routes } from \"../../constants\";\r\n\r\nfunction Sider({ onToggleSider }: any) {\r\n  const location = useLocation();\r\n  const [active, setActive] = useState(location.pathname.split(\"/\")[1]);\r\n\r\n  useEffect(() => {\r\n    setActive(location.pathname.split(\"/\")[1]);\r\n  }, [location.pathname]);\r\n\r\n  return (\r\n    <aside className={styles.sider}>\r\n      <div className={styles.user}>Viktor</div>\r\n      <ul className={styles.listWrapper}>\r\n        {routes.map(item => (\r\n          <Link to={item.linkTo} onClick={onToggleSider}>\r\n            <li className={classNames({ [styles.active]: item.linkTo === `/${active}` })}>\r\n              {item.label}\r\n            </li>\r\n          </Link>\r\n        ))}\r\n        <div className={styles.divider} />\r\n        <li>Sign Out</li>\r\n      </ul>\r\n    </aside>\r\n  );\r\n}\r\n\r\nexport default Sider;\r\n","import React from \"react\";\r\nimport styles from \"./styles.module.css\";\r\n\r\nfunction Start() {\r\n  return <div className={styles.wrapper}>Some component</div>;\r\n}\r\n\r\nexport default Start;\r\n","import React from \"react\";\r\n\r\nfunction Menu() {\r\n  return (\r\n    <svg viewBox=\"0 0 100 80\" width=\"32\" height=\"32\">\r\n      <rect width=\"100\" height=\"15\" rx=\"8\"></rect>\r\n      <rect y=\"30\" width=\"100\" height=\"15\" rx=\"8\"></rect>\r\n      <rect y=\"60\" width=\"100\" height=\"15\" rx=\"8\"></rect>\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default Menu;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./styles.module.css\";\r\nimport { routes } from \"../../constants\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport Menu from \"../../components/Menu\";\r\n\r\nconst getRoute = (pathname: string) => {\r\n  const path = pathname.split(\"/\")[1];\r\n  const route = routes.find(r => r.linkTo === `/${path}`);\r\n  if (route) return route.label.toUpperCase();\r\n  return \"\";\r\n};\r\n\r\nfunction Header({ onToggleSider }: any) {\r\n  const location = useLocation();\r\n  const [header, setHeader] = useState(getRoute(location.pathname));\r\n\r\n  useEffect(() => {\r\n    setHeader(getRoute(location.pathname));\r\n  }, [location.pathname]);\r\n\r\n  return (\r\n    <header className={styles.header}>\r\n      <div onClick={onToggleSider} className={styles.icon}>\r\n        <Menu />\r\n      </div>\r\n      <div className={styles.title}>{header}</div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport Start from \"../../pages/start/Start\";\r\nimport classNames from \"classnames\";\r\nimport styles from \"./styles.module.css\";\r\nimport Header from \"./Header\";\r\n\r\nfunction Content({ siderOpen, onToggleSider }: any) {\r\n  return (\r\n    <div\r\n      className={classNames(styles.content, {\r\n        [styles.siderOpen]: siderOpen,\r\n      })}\r\n    >\r\n      <Header onToggleSider={onToggleSider} />\r\n      <Switch>\r\n        <Route path=\"/1\" component={Start} />\r\n        <Redirect exact from=\"/\" to=\"/1\" />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Content;\r\n","import React, { useState } from \"react\";\nimport styles from \"./styles.module.css\";\nimport Sider from \"./layout/Sider\";\nimport { HashRouter as Router } from \"react-router-dom\";\nimport Content from \"./layout/Content\";\n\nfunction App() {\n  const [siderOpen, setSiderOpen] = useState(false);\n\n  const handleToggleSider = () => {\n    setSiderOpen((prev: any) => !prev);\n  };\n\n  return (\n    <div className={styles.app}>\n      <Router basename=\"/\">\n        <Sider onToggleSider={handleToggleSider} />\n        <Content onToggleSider={handleToggleSider} siderOpen={siderOpen} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}